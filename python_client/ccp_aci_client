#!/usr/bin/python

# Copyright 2018 Cisco Systems
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
#                                                              #
# CCP ACI client that provides sample input json for each      #
# CCP tenant cluster to create or delete configs on ACI fabric #
# using REST APIs                                              #
#                                                              #
# Run "./ccp_aci_client -h" to see usage                       #
#                                                              #
################################################################

import argparse
import json
import logging
import os
import sys
try:
    import requests
except ImportError, e:
    print "\n\nPython requests package is missing. " \
          "Install it by doing \"sudo pip install requests\".\n\n"
    sys.exit(1)
import yaml

parser = argparse.ArgumentParser()
parser.add_argument('ccp_aci_server_ip', help='IP address of CCP ACI server')
parser.add_argument(
    '--ccp_aci_server_port',
    help='Port of CCP ACI server. Default is 46802',
    type=int,
    default=46802)
parser.add_argument(
    'ccp_cluster_name', help='CCP cluster name (no spaces allowed)')
parser.add_argument(
    '--aci_apic_hosts',
    help=
    'ACI APIC hosts. This is needed for "create" operation. '\
    'Use comma to separate multiple ACI APIC hosts '\
    '(example: 10.10.1.2 or 10.10.1.2,10.10.1.3,10.10.1.4)', default='')
parser.add_argument('aci_username', help='ACI APIC username')
parser.add_argument('aci_password', help='ACI APIC password')
parser.add_argument(
    '--k8s_version', help='Kubernetes version. '\
    'This is needed for "create" operation. Default is 1.7', default='')
parser.add_argument(
    'operation', help='Operation', choices=['create', 'status', 'delete'])

args = parser.parse_args()

# make sure that --aci_apic_hosts and --k8s_version are passed for
# "create" operation
#
# --aci_apic_hosts and --k8s_version are not needed for
# "status" and "delete" operations
#
if args.operation == 'create':
    if args.aci_apic_hosts == '':
        print "\nERROR: --aci_apic_hosts is missing\n" \
              "       --aci_apic_hosts is needed for \"create\" operation\n"
        sys.exit(1)
    if args.k8s_version == '':
        print "\nERROR: --k8s_version is missing\n" \
              "       --k8s_version is needed for \"create\" operation\n"
        sys.exit(1)

if ' ' in args.ccp_cluster_name:
    print "\nERROR: Invalid CCP cluster name:", args.ccp_cluster_name
    print "No spaces allowed in ccp_cluster_name\n"
    sys.exit(1)


# this function returns the required http fields
def get_http_fields(operation):
    data = {
        "ccp_cluster_name": args.ccp_cluster_name,
        "aci_username": args.aci_username,
        "aci_password": args.aci_password,
    }

    if operation == "create":
        # get sample ACI input json for "create" operation
        aci_input_json = json.loads(get_sample_input_json())
        aci_input_json['aci_config']['apic_hosts'] = args.aci_apic_hosts.split(
            ",")
        data["aci_input_json"] = aci_input_json
        data["k8s_version"] = args.k8s_version

    # print "\nHTTP payload =", json.dumps(data, indent=4), "\n"

    payload = json.dumps(data)

    ccp_aci_service_url = ''.join([
        "http://", args.ccp_aci_server_ip, ":",
        str(args.ccp_aci_server_port), "/api/v1/acc_provision_" + operation
    ])
    headers = {"Content-Type": "application/json"}

    return [ccp_aci_service_url, payload, headers]


# this function provides sample input json for each CCP tenant
# cluster and creates configs on ACI fabric using HTTP POST
def acc_provision_create():
    try:
        # get http fields
        ccp_aci_service_url, payload, headers = get_http_fields("create")

        r = requests.post(
            ccp_aci_service_url, data=payload, headers=headers, timeout=60)

        print "status code = ", r.status_code
        print "HTTP response = ", json.dumps(r.json(), indent=4)

        if r.status_code != 202:
            print "\nERROR: acc_provision_create failed\n"

    except Exception as e:
        print "\n\nERROR: acc_provision_create failed\n"
        print type(e), str(e), "\n"
        logging.exception(e)


# this function deletes configs on ACI fabric using HTTP DELETE
def acc_provision_delete():
    try:
        # get http fields
        ccp_aci_service_url, payload, headers = get_http_fields("delete")

        r = requests.delete(
            ccp_aci_service_url, data=payload, headers=headers, timeout=60)

        print "status code = ", r.status_code
        print "HTTP response = ", json.dumps(r.json(), indent=4)

        if r.status_code != 202:
            print "\nERROR: acc_provision_delete failed\n"

    except Exception as e:
        print "\n\nERROR: acc_provision_delete failed\n"
        print type(e), str(e), "\n"
        logging.exception(e)


# this function gets the ACI CNI (needed for k8s) as json if it exists in
# CCP ACI server's etcd database
#
# after acc_provision_create, if this function always returns 404 as the
# http status code, then it means the creation failed, and the client must
# use acc_provision_create again to re-try creating the cluser
#
# after acc_provision_delete, if this function returns 404 as the http
# status code, then it means the deletion succeeded
#
def acc_provision_status():
    try:
        # get http fields
        ccp_aci_service_url, payload, headers = get_http_fields("status")

        r = requests.get(
            ccp_aci_service_url, data=payload, headers=headers, timeout=60)

        print "status code = ", r.status_code
        print "HTTP response = ", json.dumps(r.json(), indent=4)

        if r.status_code != 200:
            print "\nERROR: acc_provision_status failed\n"
        else:
            convert_json_to_aci_cni_yaml(r.json())

    except Exception as e:
        print "\n\nERROR: acc_provision_status failed\n"
        print type(e), str(e), "\n"
        logging.exception(e)


# this function converts ACI CNI json to ACI CNI YAML file needed for k8s
def convert_json_to_aci_cni_yaml(json):

    if "aci_cni_response" not in json:
        return

    manifests = json["aci_cni_response"]
    aci_cni_yaml = "aci_cni_" + args.ccp_cluster_name + ".yaml"

    if os.path.exists(aci_cni_yaml):
        os.remove(aci_cni_yaml)

    f = open(aci_cni_yaml, "w")

    for manifest in manifests:
        f.write("\n---\n")
        w = str(yaml.safe_dump(manifest))
        w = w.rstrip()
        f.write(w)

    f.write("\n")
    f.close()

    print "\nDone! ACI CNI YAML file is", aci_cni_yaml, "in the current directory\n"


# this function returns a sample ACI input json
#
# DO NOT EDIT AS THIS IS THE INPUT FORMAT NEEDED FOR ACI
#
# NOTE: All the keys below should be set by the http client and/or retrieved from:
#    - CCP GUI
#    - CCP database
#    - ACI profile in the GUI
#
def get_sample_input_json():
    sample_input_json = (
        '{'
            '"aci_config": {'
                '"l3out": {'
                    '"external_networks": ['
                        '"hx-ext-net"'
                    '],'
                    '"name": "hx-l3out"'
                '},'
                '"aep": "hx-aep",'
                '"vrf": {'
                    '"name": "hx-l3out-vrf",'
                    '"tenant": "common"'
                '},'
                '"vmm_domain": {'
                    '"encap_type": "vxlan",'
                    '"nested_inside": {'
                        '"type": "vmware",'
                        '"name": "hx8-vcenter"'
                    '}'
                '},'
                '"apic_hosts": ['
                    '"10.23.231.5"'
                ']'
            '},'
            '"net_config": {'
                '"extern_static": "1.4.0.1/24",'
                '"infra_vlan": 4093,'
                '"node_subnet": "1.10.58.1/24",'
                '"extern_dynamic": "1.3.0.1/24"'
            '},'
            '"registry": {'
                '"image_prefix": "noiro"'
            '}'
        '}'
    )
    return sample_input_json


if args.operation == 'create':
    acc_provision_create()
elif args.operation == 'status':
    acc_provision_status()
elif args.operation == 'delete':
    acc_provision_delete()
